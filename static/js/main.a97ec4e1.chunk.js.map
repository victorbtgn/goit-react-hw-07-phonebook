{"version":3,"sources":["redux/contacts-action.js","redux/contacts-reducer.js","redux/store.js","Common/Container.js","redux/contacts-operations.js","redux/contacts-selectors.js","Components/ContactForm/ContactForm.js","Components/Filter/Filter.js","Components/Contacts/ContactItem.js","Components/Contacts/ContactList.js","Common/Section.js","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","items","createReducer","_","payload","state","filter","id","loading","error","combineReducers","store","configureStore","reducer","contacts","contactsReducer","devTools","process","Container","children","className","axios","defaults","baseURL","dispatch","get","then","data","catch","message","name","number","contact","post","contactId","delete","getAllContacts","getFilter","getContactsLength","length","getError","getVisibleContacts","createSelector","normalizeFilter","toLowerCase","includes","ContactForm","inputChange","currentTarget","value","setState","createContact","evt","preventDefault","props","find","item","toaster","notify","duration","onSubmit","reset","this","type","onChange","Component","connect","contactSelectors","contactsOperations","contactsLength","e","target","ContactItem","onDelete","onClick","ContactList","fetchContacts","map","key","Section","title","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a97ec4e1.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactsRequest = createAction('contacts/addContactRequest');\nexport const addContactsSuccess = createAction('contacts/addContactSuccess');\nexport const addContactsError = createAction('contacts/addContactError');\n\nexport const deleteContactsRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactsSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactsError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n  changeFilter,\n} from './contacts-action';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactsSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactsRequest]: () => true,\n  [addContactsSuccess]: () => false,\n  [addContactsError]: () => false,\n  [deleteContactsRequest]: () => true,\n  [deleteContactsSuccess]: () => false,\n  [deleteContactsError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactsError]: (_, { payload }) => payload,\n  [addContactsError]: (_, { payload }) => payload,\n  [deleteContactsError]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts-reducer';\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\r\nimport './Container.css';\r\n\r\nconst Container = ({ children }) => (\r\n  <div className=\"container\">\r\n    <div className=\"phonebook\">{children}</div>\r\n  </div>\r\n);\r\n\r\nexport default Container;\r\n","import axios from 'axios';\nimport {\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-action';\n\naxios.defaults.baseURL = 'http://localhost:4000';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest);\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error.message)));\n};\n\nconst addContact = (name, number) => dispatch => {\n  const contact = { name, number };\n\n  dispatch(addContactsRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\n    .catch(error => dispatch(addContactsError(error)));\n};\n\nconst deleteContact = contactId => dispatch => {\n  dispatch(deleteContactsRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactsSuccess(contactId)))\n    .catch(error => dispatch(deleteContactsError(error)));\n};\n\nexport default { fetchContacts, addContact, deleteContact };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getAllContacts = state => state.contacts.items;\nconst getContactsLength = state => state.contacts.items.length;\nconst getFilter = state => state.contacts.filter;\nconst getError = state => state.contacts.error;\n\nconst getVisibleContacts = createSelector([getAllContacts, getFilter], (contacts, filter) => {\n  const normalizeFilter = filter.toLowerCase();\n\n  return contacts.filter(contact => contact.name.toLowerCase().includes(normalizeFilter));\n});\n\nexport default {\n  getAllContacts,\n  getFilter,\n  getContactsLength,\n  getError,\n  getVisibleContacts,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport toaster from 'toasted-notes';\nimport 'toasted-notes/src/styles.css';\nimport contactsOperations from '../../redux/contacts-operations';\nimport contactSelectors from '../../redux/contacts-selectors';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  inputChange = ({ currentTarget: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  createContact = evt => {\n    evt.preventDefault();\n    const { name, number } = this.state;\n\n    const isExist = this.props.items.find(item => item.name === name);\n\n    if (isExist) {\n      toaster.notify(`${name} is already in contacts.`, {\n        duration: 5000,\n      });\n      return;\n    }\n\n    if (!name || !number) {\n      toaster.notify('Please fill the form', {\n        duration: 5000,\n      });\n      return;\n    }\n\n    if (number.length < 7 || number.length > 7) {\n      toaster.notify('Please fill the correct number: 12-34-567', {\n        duration: 5000,\n      });\n      return;\n    }\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.createContact}>\n        <label>\n          Name *\n          <br />\n          <input type=\"text\" name=\"name\" value={name} className=\"input\" onChange={this.inputChange} />\n        </label>\n        <br />\n        <label>\n          Phone number *\n          <br />\n          <input type=\"number\" name=\"number\" value={number} className=\"input\" onChange={this.inputChange} />\n        </label>\n        <br />\n        <button className=\"btn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: contactSelectors.getAllContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: contact => dispatch(contactsOperations.addContact(contact.name, contact.number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts-action';\nimport contactSelectors from '../../redux/contacts-selectors';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ filter, contactsLength, onChange }) => (\n  <>\n    {contactsLength > 1 && (\n      <label>\n        Find contacts by name\n        <br />\n        <input type=\"text\" name=\"filter\" value={filter} className=\"input\" onChange={onChange} />\n      </label>\n    )}\n  </>\n);\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  contactsLength: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: contactSelectors.getFilter(state),\n  contactsLength: contactSelectors.getContactsLength(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onDelete }) => (\n  <li className=\"list-item\">\n    <div className=\"list-item-data\">\n      <span>{name}:</span>\n      <span>\n        {number[0]}\n        {number[1]}-{number[2]}\n        {number[3]}-{number[4]}\n        {number[5]}\n        {number[6]}\n      </span>\n    </div>\n    <button className=\"btnContact\" type=\"button\" onClick={() => onDelete(id)}>\n      &#215;\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import React, { Component } from 'react';\nimport ContactItem from './ContactItem';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts-operations';\nimport contactSelectors from '../../redux/contacts-selectors';\nimport PropTypes from 'prop-types';\n\nclass ContactList extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <>\n        <ul className=\"list\">\n          {this.props.contacts.map(({ id, name, number }) => (\n            <ContactItem key={id} id={id} name={name} number={number} onDelete={() => this.props.onDelete(id)} />\n          ))}\n        </ul>\n\n        {this.props.error && (\n          <>\n            <p className=\"errorMessage\">{this.props.error}</p>\n            <p className=\"errorMessage\">The server is temporarily unavailable, try again later.</p>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactSelectors.getVisibleContacts(state),\n  error: contactSelectors.getError(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n  onDelete: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <>\r\n    {title && <h2 className=\"feedback-title\">{title}</h2>}\r\n\r\n    <section className=\"section\">{children}</section>\r\n  </>\r\n);\r\n\r\nSection.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport Container from './Common/Container';\r\nimport ContactForm from './Components/ContactForm/ContactForm';\r\nimport Filter from './Components/Filter/Filter';\r\nimport ContactList from './Components/Contacts/ContactList';\r\nimport Section from './Common/Section';\r\nimport 'toasted-notes/src/styles.css';\r\nimport './App.css';\r\n\r\nconst App = () => (\r\n  <Container>\r\n    <Section title=\"Phonebook\">\r\n      <ContactForm />\r\n    </Section>\r\n\r\n    <Section title=\"Contacts\">\r\n      <Filter />\r\n\r\n      <ContactList />\r\n    </Section>\r\n  </Container>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}